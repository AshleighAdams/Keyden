name: Release

on:
  release:
    types:
      - published

defaults:
  run:
    shell: bash

jobs:
  build:
    name: "Build ${{ matrix.rid }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
        - rid: win-x64
          os: windows-latest
          project: src/Keyden.Desktop.Windows
          installer-arch: x64
        - rid: win-arm64
          os: windows-latest
          project: src/Keyden.Desktop.Windows
          installer-arch: arm64
        - rid: linux-x64
          os: ubuntu-latest
          project: src/Keyden.Desktop.Unix
        # - rid: linux-arm64
        #   os: ubuntu-latest
        #   project: src/Keyden.Desktop.Unix
        - rid: osx-x64
          os: macos-13
          project: src/Keyden.Desktop.Unix
        # - rid: osx-arm64
        #   os: macos-13
        #   project: src/Keyden.Desktop.Unix
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        submodules: recursive

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Setup Verlite
      run: |
        #verlite_version="$(dotnet msbuild Directory.Build.props -getitem:PackageReference | jq -r '.Items.PackageReference[] | select(.Identity=="Verlite.MsBuild") .Version')"
        verlite_version="2.5.0"
        dotnet tool install --global Verlite.CLI --version "$verlite_version"
        verlite . --enable-shadow-repo --auto-fetch --verbosity verbatim

    - name: Build Binaries
      run: |
        dotnet publish "${project}" --configuration Release -r "${rid}" -o "artifacts-publish"
        mkdir artifacts
        cd artifacts-publish
        rm *.pdb || true
        rm *.dbg || true
        rm *.xml || true
        if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a "../artifacts/Keyden-${rid}.zip" .
        else
            7za a "../artifacts/Keyden-${rid}.zip" .
        fi
      env:
        rid: ${{ matrix.rid }}
        project: ${{ matrix.project }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: unsigned-artifacts-${{ matrix.rid }}
        if-no-files-found: error
        path:  |
          artifacts/*

  sign-and-build-installers:
    name: Sign Binaries & Build Installers
    needs: build
    runs-on: keymaker
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        submodules: recursive

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts-unsigned
        pattern: 'unsigned-artifacts-*'
        merge-multiple: true

    - name: Sign Binaries
      run: |
        mkdir -p artifacts
        cd artifacts-unsigned
        
        7z x Keyden-win-x64.zip -oKeyden-win-x64
        pushd Keyden-win-x64
            ScSignTool.exe -pin $PIN sign -fd sha256 -tr http://ts.ssl.com/ -td sha256 -n "Ashleigh Adams" Keyden.exe
            7z a "../../artifacts/Keyden-win-x64.zip" .
        popd

        7z x Keyden-win-arm64.zip -oKeyden-win-arm64
        pushd Keyden-win-arm64
            ScSignTool.exe -pin $PIN sign -fd sha256 -tr http://ts.ssl.com/ -td sha256 -n "Ashleigh Adams" Keyden.exe
            7z a "../../artifacts/Keyden-win-arm64.zip" .
        popd
      env:
        PIN: ${{ secrets.CODESIGN_PIN }}

    - name: Copy Unsigned Binaries
      run: |
        mkdir -p artifacts
        cp artifacts-unsigned/Keyden-linux-x64.zip artifacts/
        cp artifacts-unsigned/Keyden-osx-x64.zip artifacts/
      env:
        PIN: ${{ secrets.CODESIGN_PIN }}

    - name: Build Signed Installers
      run: |
        version=$(verlite . --enable-shadow-repo)
        cd src/Keyden.Installer.Windows

        ./InnoSetup/ISCC.exe \
            Keyden.iss \
            -DVersion="$version" \
            -DArch=x64 \
            -DArtifactsDir=../../artifacts-unsigned/Keyden-win-x64 \
            -FKeydenSetup-x64 -O../../artifacts \
            -DEnableSigning \
            -Sst="ScSignTool.exe -pin $PIN sign -fd sha256 -tr http://ts.ssl.com/ -td sha256 -n \$qAshleigh Adams\$q \$f"

        ./InnoSetup/ISCC.exe \
            Keyden.iss \
            -DVersion="$version" \
            -DArch=amd64 \
            -DArtifactsDir=../../artifacts-unsigned/Keyden-win-amd64 \
            -FKeydenSetup-amd64 -O../../artifacts \
            -DEnableSigning \
            -Sst="ScSignTool.exe -pin $PIN sign -fd sha256 -tr http://ts.ssl.com/ -td sha256 -n \$qAshleigh Adams\$q \$f"
      env:
        PIN: ${{ secrets.CODESIGN_PIN }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: signed-artifacts
        if-no-files-found: error
        path:  |
          artifacts/*

  release:
    name: Release
    needs: sign-and-build-installers
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '1'
        submodules: recursive

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        name: signed-artifacts

    - name: Upload release
      run: |
        set -x
        tag="${GITHUB_REF#refs/*/}"
        files=()

        IFS=$'\n';
        for asset in $(find ./artifacts -name "*.*"); do
          files+=("$asset")
        done

        gh release upload "$tag" "${files[@]}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
